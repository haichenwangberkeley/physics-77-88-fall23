{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "10a439c1",
   "metadata": {},
   "source": [
    "# Workshop 14, December 1, 2023\n",
    "\n",
    "**due by 8:59 pm December 5, 2023**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "815f9eea",
   "metadata": {},
   "source": [
    "# Practice Fit with the Final Project Data\n",
    "\n",
    "- Data for the final project are saved in a h5 file. We will show you how to get this h5 file and how to retrieve the data numpy array\n",
    "- We will also use this data set to do some binned maximum log likelihood fit exercise\n",
    "- You should have completed the Part 1 of this problem in WS9."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba136387",
   "metadata": {},
   "source": [
    "## Part 1 Loading Data and Plot the Mass Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a5e2b6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import h5py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05fe8976",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Downloading this h5 file from the web\n",
    "import os\n",
    "os.system(\"wget https://portal.nersc.gov/project/m3438/physics77/data/datalhc.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7fed688",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open h5 file\n",
    "h = h5py.File(\"datalhc.h5\",'r')\n",
    "\n",
    "# Retrieve the data array \n",
    "data = h[\"dataset\"][:]\n",
    "\n",
    "# Check its shape\n",
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43c67f33",
   "metadata": {},
   "source": [
    "The shape of data array is (1178902, 10), indicating that there are 1,178,902 collision events that contain two photons. The axis 1 has 10 entries. They are\n",
    "\n",
    "- transverse momentum of photon 1\n",
    "- pseudo rapidity of photon 1\n",
    "- azimuthal angle of photon 1\n",
    "- energy of photon 1\n",
    "- transverse momentum of photon 2\n",
    "- pseudo rapidity of photon 2\n",
    "- azimuthal angle of photon 2\n",
    "- energy of photon 2\n",
    "- Event Number, which is an index of the collision event\n",
    "- Run Number, which is an index of a `run`. At LHC, the detector is often run for an extended period of time, raning from a few minuts to a few hours. Data events collected in the same data taking period are said to be in the same `run`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2054e9d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here a few functions are defined to get the px, py, pz components of the momentum\n",
    "\n",
    "def px(pt, phi):\n",
    "    return pt*np.cos(phi)\n",
    "\n",
    "def py(pt,phi):\n",
    "    return pt*np.sin(phi)\n",
    "\n",
    "def pz(pt, eta):\n",
    "    return pt*np.sinh(eta)\n",
    "\n",
    "\n",
    "# Using energy and momentum we can calculate the mass of a particle or a multi-particle system\n",
    "def mass(E,px,py,pz):\n",
    "    return np.sqrt(E**2 - (px**2+py**2+pz**2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e11d8bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will use the functions defined above to calculate \n",
    "# the px, py, pz components of the diphoton momentum\n",
    "px_yy = \n",
    "py_yy =\n",
    "pz_yy = \n",
    "\n",
    "# We will also calculate the energy of the diphoton system\n",
    "# which is the sum of individual photons\n",
    "E_yy = \n",
    "\n",
    "# Finally, we can calculate the diphoton mass\n",
    "m_yy = mass(E_yy, px_yy,py_yy,pz_yy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e805dd",
   "metadata": {},
   "source": [
    "## Plot the $m_{\\gamma\\gamma}$ distribution\n",
    "- a tiny bump around 125 GeV is already discernible "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ca46947",
   "metadata": {},
   "outputs": [],
   "source": [
    "# How does the diphoton mass distribution look like?\n",
    "\n",
    "obs, binedges,others =plt.hist(m_yy,bins=55,range=(105,160),label='Data 2015-2018')\n",
    "plt.xlabel('$m_{\\gamma\\gamma}$ [GeV]')\n",
    "plt.ylabel('Number of entries')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ec0f3bc",
   "metadata": {},
   "source": [
    "## Part 2 Use the maximum log likelihood method to fit a 4th order polynomial to data\n",
    "- define a 4th order polynomial function, `poly4`\n",
    "- define the NLL for this `poly4`. \n",
    "    - For the sake of simplicity, we calculate the value of the polyminomial at np.linspace(105.5,159.5,55), i.e., the bin centers of the above histogram. The binwidth is 1\n",
    "- Use scipy.optimize.minimize to perform the fit, in which the coefficients of the terms are determined\n",
    "- Visualize the fitted Polynomial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbe163d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a fourth-order polynomial\n",
    "def poly4(myy,c):\n",
    "    return 1 + c[0]*myy + c[1]*myy**2 + c[2]*myy**3 + c[3]*myy**4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bcc0622",
   "metadata": {},
   "outputs": [],
   "source": [
    "def NLLpoly(c, obs):\n",
    "    # Create a sequence of values at which the expectation will be evaluated\n",
    "    myy = np.linspace(105.5,159.5,55)\n",
    "    # The expectaiton. Note that the c[4] factor will take care of the normalization of the polynomial PDF\n",
    "    exp = poly4(myy, [c[0],c[1],c[2],c[3]])*c[4]\n",
    "    # return a negative log likelihood\n",
    "    # again, needs to sum over all 55 bins\n",
    "    NLLvalue = -1*poisson.logpmf(obs,exp).sum()\n",
    "    return NLLvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b98db01a",
   "metadata": {},
   "source": [
    "### Fit the 4th order polynomial to data\n",
    "- print out the fit result\n",
    "- visualize the fitted function and data distribution\n",
    "**Does the fit make sense?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c35957fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = minimize(NLLpoly,x0=[-10,100,1,1,1],args=(obs),method='Nelder-Mead')\n",
    "print(result)\n",
    "\n",
    "# Pass the fitted values back to the list c\n",
    "c=result.x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08a730eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use the fitted coefficients to create the expectation\n",
    "myy = np.linspace(105.5,159.5,55)\n",
    "fit = poly4(myy, [c[0],c[1],c[2],c[3]])*c[4]\n",
    "\n",
    "# Data\n",
    "obs, binedges,others =plt.hist(m_yy,bins=55,range=(105,160), label='data')\n",
    "plt.plot(myy,fit,'r--', label='Fitted Polynomial')\n",
    "plt.legend(fontsize=14)\n",
    "plt.xlabel('$m_{\\gamma\\gamma}$ [GeV]')\n",
    "plt.ylabel('Number of entries')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d501318a",
   "metadata": {},
   "source": [
    "## Execute the next cell repeatedly\n",
    "- the minimization algorithm is pretty rudimentary. It doesn't perform well. \n",
    "- the first fit is unlikely to be a good one\n",
    "- in the next cell, we pass the fit result to c, and use them as the initial value in a new iteration of minimization\n",
    "- repeatedly execute the next cell and see if the NLL decreases and if the fit continues to improve\n",
    "\n",
    "**Your final fit plot should look like **\n",
    "\n",
    "<img src=\"https://portal.nersc.gov/project/m3438/physics77/WS09/fig6.png\" width=500>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e18cc8dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = minimize(NLLpoly,x0=c,args=(obs),method='Nelder-Mead')\n",
    "print('Pay attention to the NLL value {:6.3f}'.format(result.fun))\n",
    "c=result.x\n",
    "fit = poly4(myy, [c[0],c[1],c[2],c[3]])*c[4] \n",
    "obs, binedges,others =plt.hist(m_yy,bins=55,range=(105,160), label='data')\n",
    "plt.plot(myy,fit,'r--', label='Fitted Polynomial')\n",
    "plt.legend(fontsize=14)\n",
    "plt.xlabel('$m_{\\gamma\\gamma}$ [GeV]')\n",
    "plt.ylabel('Number of entries')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d7d4977",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"The minimized NLL value with bkg-only PDF is {:5.2f}\".format(   ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6100cd",
   "metadata": {},
   "source": [
    "## Fit data with a signal plus background PDF\n",
    "- In this exercise, we will create a different function\n",
    "$$\n",
    "f(x=m_{\\gamma\\gamma}) = n_b \\sum_i c_i x^i + n_s \\mathrm{Normal}(x,125,1.6)\n",
    "$$\n",
    "    - in this setup, the first term is a fourth order polynomial, and its normalized to $n_b$ which is the number of background events. The second term is a normal distribution with a mean of 125 and a standard deviation of 1.6, and its normalization $n_s$ represents the number of signal events. \n",
    "    - the shape (mean and std. dev.) of the Gaussian distribution is fixed \n",
    "    - the free parameters in the fit include\n",
    "        - the coefficients of the polynomial\n",
    "        - the normalizations of the signal and background PDFs ($n_s$ and $n_b$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46eef9ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the signal pdf\n",
    "\n",
    "def sigpdf(myy,mean,std):\n",
    "    return norm.pdf(myy,mean,std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78e43b11",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define negative log likelihood value with the observed data and the signal plus background PDF\n",
    "def NLLSpluspoly(c, obs):\n",
    "    myy = np.linspace(105.5,159.5,55)\n",
    "    exp = poly4(myy, [c[0],c[1],c[2],c[3]])*c[4] + sigpdf(myy,125,1.6)*c[5]\n",
    "    NLLvalue = -1*poisson.logpmf(obs,exp).sum()\n",
    "    return NLLvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37543db0",
   "metadata": {},
   "source": [
    "Now we perform an initial fit to the observed data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83cce13e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note that I am using the coefficients determined from the previous fits as the\n",
    "# initial values here\n",
    "result = minimize(NLLSpluspoly,x0=np.hstack((c,1000)),args=(obs),method='Nelder-Mead')\n",
    "c1=result.x\n",
    "print('Pay attention to the NLL value {:6.3f}'.format(result.fun))\n",
    "myy = np.linspace(105.5,159.5,55)\n",
    "fit = poly4(myy, [c1[0],c1[1],c1[2],c1[3]])*c1[4] + sigpdf(myy,125,1.6)*c1[5]\n",
    "# Data\n",
    "obs, binedges,others =plt.hist(m_yy,bins=55,range=(105,160), label='data')\n",
    "plt.plot(myy,fit,'r--', label='Fitted Polynomial')\n",
    "plt.legend(fontsize=14)\n",
    "plt.xlabel('$m_{\\gamma\\gamma}$ [GeV]')\n",
    "plt.ylabel('Number of entries')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b64b602d",
   "metadata": {},
   "source": [
    "### Execute the cell below repeatedly to see if fit gets improved?\n",
    "\n",
    "**Final output**\n",
    "\n",
    "<img src=\"https://portal.nersc.gov/project/m3438/physics77/WS09/fig7.png\" width=500>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "338d435e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "result = minimize(NLLSpluspoly,x0=c1,args=(obs),method='Nelder-Mead')\n",
    "c1=result.x\n",
    "print('Pay attention to the NLL value {:6.3f}'.format(result.fun))\n",
    "myy = np.linspace(105.5,159.5,55)\n",
    "fit = poly4(myy, [c1[0],c1[1],c1[2],c1[3]])*c1[4] + sigpdf(myy,125,1.6)*c1[5]\n",
    "# Data\n",
    "obs, binedges,others =plt.hist(m_yy,bins=55,range=(105,160), label='data')\n",
    "plt.plot(myy,fit,'r--', label='Fitted Polynomial')\n",
    "plt.legend(fontsize=14)\n",
    "plt.xlabel('$m_{\\gamma\\gamma}$ [GeV]')\n",
    "plt.ylabel('Number of entries')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff7e3b23",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The fitted number of signal events is {:4.2f} '.format(   ))\n",
    "\n",
    "print(\"The minimized NLL value with signal-plus-bkg PDF is {:5.2f}\".format(   ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fec955f7",
   "metadata": {},
   "source": [
    "## Exercise 1\n",
    "\n",
    "Can you make a modification to the functions that perform NLL calculations so that the expectation of each bin is calculated as a numberical integration of the PDF from the lower edge of the bin to the higher edge of the bin?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74cf43d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a236f615",
   "metadata": {},
   "source": [
    "## Exercise 2\n",
    "Can you develop the code to fit the data with a signal plus background pdf where the mean and sigma of the signal pdf are also free?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfaab93f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def NLLSpluspolyfree(c, obs):\n",
    "\n",
    "    # complete the cell here\n",
    "    \n",
    "    return NLLvalue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9783a349",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your fit code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8d710b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your fit code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd683214",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The fitted mean value of the signal is {:4.2f} GeV'.format(  ))\n",
    "print('The fitted sigma value of the signal is {:4.2f} GeV'.format( ))\n",
    "print('The fitted number of signal events is {:4.2f} '.format(  ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7392efd",
   "metadata": {},
   "source": [
    "Congratulations for completing this workshop!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db85f5fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
